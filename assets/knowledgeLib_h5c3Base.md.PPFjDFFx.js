import{_ as e,o as a,c as i,a4 as l}from"./chunks/framework.L2LGhy-S.js";const u=JSON.parse('{"title":"一、Html 基础","description":"","frontmatter":{},"headers":[],"relativePath":"knowledgeLib/h5c3Base.md","filePath":"knowledgeLib/h5c3Base.md","lastUpdated":1715762508000}'),t={name:"knowledgeLib/h5c3Base.md"},o=l('<h1 id="一、html-基础" tabindex="-1">一、Html 基础 <a class="header-anchor" href="#一、html-基础" aria-label="Permalink to &quot;一、Html 基础&quot;">​</a></h1><h2 id="script-标签-defer、async-属性" tabindex="-1">script 标签 defer、async 属性 <a class="header-anchor" href="#script-标签-defer、async-属性" aria-label="Permalink to &quot;script 标签 defer、async 属性&quot;">​</a></h2><p><code>script</code> 遇到脚本会停止解析，等待脚本加载完成后再继续解析。</p><p><code>defer</code> 异步加载、等待执行。属性规定是否对脚本执行进行延迟，直到页面加载为止。</p><p><code>async</code> 异步加载、立即执行。属性规定一旦脚本可用，则会异步执行。</p><h2 id="http-2-的优势" tabindex="-1">HTTP/2 的优势 <a class="header-anchor" href="#http-2-的优势" aria-label="Permalink to &quot;HTTP/2 的优势&quot;">​</a></h2><ul><li><p>二进制分帧：HTTP/2 会将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码。</p></li><li><p>头部压缩：HTTP/2 实现了 HPACK 算法，用于对头部进行压缩，减少请求和响应头中重复携带的数据。</p></li><li><p>服务器推送：服务器可以主动向客户端推送资源，提高加载效率。</p></li><li><p>多路复用：一个域名只创建一个 TCP 连接，可以发送多个请求和响应，而不用按照顺序一一对应，降低资源占用和性能消耗。</p></li></ul><h2 id="一次完整的-http-服务是怎样的" tabindex="-1">一次完整的 HTTP 服务是怎样的 <a class="header-anchor" href="#一次完整的-http-服务是怎样的" aria-label="Permalink to &quot;一次完整的 HTTP 服务是怎样的&quot;">​</a></h2><ul><li>DNS 域名解析，获得 IP</li><li>TCP 三次握手，建立连接</li><li>发送 HTTP 请求</li><li>服务器处理请求，返回 HTTP 响应</li><li>浏览器解析 html，并请求其中的资源（js、css、图片等）</li><li>页面渲染</li><li>断开连接，TCP 四次挥手</li></ul><hr><br><h1 id="二、css-基础" tabindex="-1">二、Css 基础 <a class="header-anchor" href="#二、css-基础" aria-label="Permalink to &quot;二、Css 基础&quot;">​</a></h1><h2 id="隐藏元素的方法" tabindex="-1">隐藏元素的方法 <a class="header-anchor" href="#隐藏元素的方法" aria-label="Permalink to &quot;隐藏元素的方法&quot;">​</a></h2><ul><li><code>display: none;</code> 隐藏元素，不占据空间。</li><li><code>visibility: hidden;</code> 隐藏元素，占据空间。</li><li><code>opacity: 0;</code> 隐藏元素，占据空间。</li><li><code>overflow: hidden;</code> 隐藏溢出元素。</li><li><code>left: -9999px;</code> 元素移出屏幕。</li><li><code>z-index: -9999;</code> 元素移至底层，被覆盖可隐藏。</li><li><code>transform: scale(0, 0);</code> 占据空间，但不可交互。</li></ul>',14),c=[o];function d(r,s,h,n,p,_){return a(),i("div",null,c)}const P=e(t,[["render",d]]);export{u as __pageData,P as default};
